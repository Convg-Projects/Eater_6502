PORTB = $6000
PORTA = $6001
DDRB  = $6002
DDRA  = $6003
PCR   = $600c
IFR   = $600d
IER   = $600e

value   = $0200			; 2 bytes
mod10   = $0202
message = $0204			; 6 bytes
counter = $020a			; 2 bytes

E  = %10000000
RW = %01000000
RS = %00100000

 .org $8000

 reset:
	ldx #$ff
	txs			; Initialise SP
	cli			; Enable interrupts

	lda #%10000010		; Set CA1
	sta IER
	lda #%00000000		;
	sta PCR

	lda #%11111111		; Set all pins on Port B to output
       	sta DDRB
	lda #%11100000		; Set top 3 pins on port A to output
	sta DDRA
	lda #%00111000		; Set LCD to 8-bit mode, 2-line display, 5x8 font
	jsr lcd_instruction
	lda #%00001110		; Display on, cursor on, blink off
	jsr lcd_instruction
	lda #%00000110		; Increment and shift cursor without shifting display
	jsr lcd_instruction
	lda #%00000001		; Clear display
	jsr lcd_instruction

	lda #0
	sta counter
	sta counter + 1
 loop:
	lda #%00000010		; Cursor to home
	jsr lcd_instruction

	lda #0
	sta message

	; Initialise value to binary number
	lda counter		; Little end
	sta value
	lda counter + 1		; Big end
	sta value + 1

 divide:
	; Initiate remainder to zero
	lda #0
	sta mod10
	sta mod10 + 1
	clc

	ldx #16
 divloop:
	; Rotate quotient and remainder
	rol value
	rol value + 1
	rol mod10
	rol mod10 + 1

	; A:Y = dividend - divisor
	sec
	lda mod10
	sbc #10
	tay			; Save low byte in Y
	lda mod10 + 1
	sbc #0
	bcc ignore_result	; branch if dividend < divisor
	sty mod10
	sta mod10 + 1

 ignore_result:
	dex
	bne divloop
	rol value		; Shift in last bit of quotient
	rol value + 1

	lda mod10
	clc
	adc #"0"
	jsr push_char

	; If value != 0, continue dividing
	lda value
	ora value + 1
	bne divide		; Divide again if value is not zero

	ldx #0
 print:
	lda message,x
	beq loop
	jsr print_character
	inx
	jmp print

 number:  .word 3141		; DELETE

 ; Add character in Accumulator to beginning of null-terminated string 'message'
 push_char:
	pha			; Push new first char onto stack
	ldy #0
	
 char_loop:
	lda message,y		; Get character on string and put into X
	tax
	pla
	sta message,y		; Pull char off stack and add to string
	iny
	txa
	pha			; Push char from string onto stack
	bne char_loop		; If terminator not reached, loop
	
	pla			; Pull terminator
	sta message,y		; Add terminator to message

 lcd_wait:
	pha
	lda #%00000000		; Set all pins on Port B to intput
	sta DDRB
 lcd_busy:
	lda #RW
	sta PORTA
	lda #(RW | E)
	sta PORTA
	lda PORTB
	and #%10000000
	bne lcd_busy

	lda #RW
	sta PORTA
	lda #%11111111		; Set all pins on Port B to output
	sta DDRB
	pla
	rts

 lcd_instruction:
	jsr lcd_wait
	sta PORTB
	lda #0			; Clear control pins
	sta PORTA
	lda #E			; Set enable bit to send instruction
	sta PORTA
	lda #0			; Clear control pins
	sta PORTA
	rts

 print_character:
	jsr lcd_wait
	sta PORTB
	lda #RS			; Enable register select to write
	sta PORTA
	lda #(RS | E)		; Set enable bit to send instruction
	sta PORTA
	lda #RS			; Enable register select to write
	sta PORTA
	rts

 nmi:
 irq:
	pha
	txa
	pha
	tya
	pha			; Push A, X, and Y so they aren't overwritten by interrupt routine

	inc counter
	bne exit_irq
	inc counter + 1
 exit_irq:
	ldy #$40
	ldx #$40
 delay:
	dex
	bne delay
	dey
	bne delay


	bit PORTA		; Reading Port A clears the interrupt on the 6522

	pla
	tay
	pla
	tax
	pla
	rti

 .org $fffa
 .word nmi
 .word reset
 .word irq
